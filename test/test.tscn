[gd_scene load_steps=6 format=3 uid="uid://byrjiy3owmq3"]

[sub_resource type="GDScript" id="GDScript_5dx6u"]
script/source = "@tool
extends Node3D

@export var setup: bool:
	set(value):
		if value:
			run()
var compute: ComputeWorker

@onready var box1: MeshInstance3D = $MeshInstance3D
@onready var box2: MeshInstance3D = $MeshInstance3D2

func run() -> void:
	compute = ComputeWorker.create('res://addons/compute_companion/test/test.glsl')
	var data: Array[Image] = [
		Image.create(8, 8, false, Image.FORMAT_RGBAF),
		Image.create(8, 8, false, Image.FORMAT_RGBAF)]
	data[0].fill(Color.RED)
	data[1].fill(Color.BLUE)
	var output := GPU_Image.new(data[0], 0, 'output_texture')
	var t_array := GPU_Texture2DArray.new(data, 1, 't_array')
	compute.uniform_sets[0].uniforms = [output, t_array]
	compute.initialize(8, 8, 1)
	compute.execute_compute_shader()
	var out = compute.get_uniform_data_by_alias('output_texture')
	(box1.get_surface_override_material(0) as StandardMaterial3D).albedo_texture = ImageTexture.create_from_image(out)
	print('done')
"

[sub_resource type="BoxMesh" id="BoxMesh_xoh5g"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_f5h3s"]

[sub_resource type="BoxMesh" id="BoxMesh_n3x6c"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_vqlim"]

[node name="Node3D" type="Node3D"]
script = SubResource("GDScript_5dx6u")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -2.03649, 0, 0)
mesh = SubResource("BoxMesh_xoh5g")
surface_material_override/0 = SubResource("StandardMaterial3D_f5h3s")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="."]
mesh = SubResource("BoxMesh_n3x6c")
surface_material_override/0 = SubResource("StandardMaterial3D_vqlim")
